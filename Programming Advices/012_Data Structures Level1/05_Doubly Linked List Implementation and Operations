namespace lab
{
    class Program
    {
        static void Main(string[] args)
        {
            //Refernce: https://www.dotnetlovers.com/Article/145/implementation-and-analysis-of-doubly-linked-list-data-structure

            SaleemDoublyLinkedList saleemDoublyLinkedList = new SaleemDoublyLinkedList();

            //1) Insert At Begging
            saleemDoublyLinkedList.InsertAtHead(2);
            saleemDoublyLinkedList.InsertAtHead(1);
            saleemDoublyLinkedList.InsertAtHead(0);
            saleemDoublyLinkedList.printAllNodes(saleemDoublyLinkedList);

            ////2) Find 
            ////Console.WriteLine(saleemDoublyLinkedList.Find(0).Value);

            ////3)  Insert After
            //saleemDoublyLinkedList.InsertAtPosition(1, 2);
            //saleemDoublyLinkedList.printAllNodes(saleemDoublyLinkedList);

            ////4) Insert At End
            //saleemDoublyLinkedList.InsertAtEnd(3);
            //saleemDoublyLinkedList.printAllNodes(saleemDoublyLinkedList);

            //5)Delete Node
            //saleemDoublyLinkedList.Delete(1);
            //saleemDoublyLinkedList.printAllNodes(saleemDoublyLinkedList);

            //6)Delete First Node
            //saleemDoublyLinkedList.DeleteFirstNode();
            //saleemDoublyLinkedList.printAllNodes(saleemDoublyLinkedList);

            //7) Delete Last Node
            saleemDoublyLinkedList.DeleteLastNode();
            saleemDoublyLinkedList.printAllNodes(saleemDoublyLinkedList);

        }
        public class Node
        {
            public int Value { get; set; }
            public Node Next { get; set; }
            public Node Previous { get; set; }
        }
        public class SaleemDoublyLinkedList
        {
            public Node Head;
            public Node Tail;

            public SaleemDoublyLinkedList()
            {
                Head = Tail = null;
            }

            public void InsertAtHead(int element)
            {
                if (Head == null)
                {
                    Head = new Node();
                    Head.Value = element;
                    Tail = Head;
                }
                else
                {
                    Node newNode = new Node();
                    newNode.Value = element;
                    newNode.Next = Head;
                    Head.Previous = newNode;
                    Head = newNode;
                }
            }

            public void InsertAtTail(int element)
            {
            }

            public void InsertAtPosition(int element, int position)
            {
                if (Head == null)
                {
                    Head = new Node();
                    Head.Value = element;
                    Tail = Head;
                }
                else
                {
                    Node newNode = new Node();
                    newNode.Value = element;

                    Node temp = Head;
                    while (temp != null && position > 1)
                    {
                        temp = temp.Next;
                        position--;
                    }
                    Node tempPre = temp.Previous;

                    tempPre.Next = newNode;
                    newNode.Previous = tempPre;
                    newNode.Next = temp;
                    temp.Previous = newNode;
                }
            }
            public void InsertAtEnd(int newElement)
            {
                //1. allocate node
                Node newNode = new Node();

                //2. assign data element
                newNode.Value = newElement;

                //3. assign null to the Next and prev
                //   of the new node
                newNode.Next = null;
                newNode.Previous = null;

                //4. Check the list is empty or not,
                //   if empty make the new node as Head
                if (Head == null)
                {
                    Head = newNode;
                }
                else
                {

                    //5. Else, traverse to the last node
                    Node temp = new Node();
                    temp = Head;
                    while (temp.Next != null)
                        temp = temp.Next;

                    //6. Adjust the links
                    temp.Next = newNode;
                    newNode.Previous = temp;
                }

            }

            public bool Delete(int value)
            {
                Node node = Head;
                while (node != null)
                {
                    if (node.Value == value)
                    {
                        node.Previous.Next = node.Next;
                        node.Next.Previous = node.Previous;
                        return true;
                    }
                    else
                        node = node.Next;
                }
                return false;
            }
            public void DeleteFirstNode()
            {
                if (this.Head != null)
                {

                    //1. if Head is not null, create a
                    //   temp node pointing to Head
                    Node temp = this.Head;

                    //2. move Head to Next of Head
                    this.Head = this.Head.Next;

                    //3. delete temp node
                    temp = null;

                    //4. If the new Head is not null, then
                    //   make prev of the new Head as null
                    if (this.Head != null)
                        this.Head.Previous = null;
                }
            }
            public void DeleteLastNode()
            {
                if (this.Head != null)
                {

                    //1. if Head in not null and Next of Head
                    //   is null, release the Head
                    if (this.Head.Next == null)
                    {
                        this.Head = null;
                    }
                    else
                    {

                        //2. Else, traverse to the second last 
                        //   element of the list
                        Node temp = new Node();
                        temp = this.Head;
                        while (temp.Next.Next != null)
                            temp = temp.Next;

                        //3. Change the Next of the second 
                        //   last node to null and delete the
                        //   last node
                        Node lastNode = temp.Next;
                        temp.Next = null;
                        lastNode = null;
                    }
                }
            }

            public Node Find(int value)
            {
                Node node = Head;
                while (node != null)
                {
                    if (node.Value == value)
                        return node;
                    else
                        node = node.Next;
                }
                return null;
            }
            public void printAllNodes(SaleemDoublyLinkedList list)
            {
                Node node = list.Head;

                Console.Write("Head -> ");
                while (node != null)
                {
                    Console.Write(node.Value);
                    Console.Write(" -> ");
                    node = node.Next;
                }
                Console.Write("NULL");
                Console.WriteLine();
            }
        }
    }
}
