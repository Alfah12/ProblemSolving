Note: Important to solve all lessons question

-------------- OOP Concept Brief -------------

1- Encapculation:
  - Arrange all related (Variables-Methods) under the Class
  - access the class only through the objects
  
2- Abstraction:
  - I only “expose” only the necessary class member (Variables - Methods )to the other users (developers), and “hides” the unnecessary details.
  - Abstraction != Abstract Class
  
3- Inheritance:
 - Maximize reusability/maintainability
 - Super/Base Class <<<-----Inherits----- Sub/Derived Class
 - Multi Level Inheritence: Person->Employee->Developer (Not like Multi Inheritence)
 - Inheritince Types:
    1- Single Inheritance Person:Employee
    2- Multi Level Inheritance Person:Employee:Developer
    3- Hierarchal Inhertance Employee:Doctor Employee:Developer Employee:Tester (All Inherites from base class Employee)
    4- Multiple Inheritance (danger only with c++)
    5- Hyperd Inheritance (more danger than 4)

-------------- Important to Understand ---------

1- Access Modifiers:
    - set the accessibility of classes, methods, and other members.
    - private: class
    - protected: private for out class and public for class and childs
    - public: All

2- Constructors:
    - special type of member function that is called automatically when an object is created
    - same name as that of the class and it does not have a return type
    - Default Constructor: A constructor with no parameters is known as a default constructor.
    - Parameterized Constructor: a constructor with parameters is known as a parameterized constructor. This is the preferred method to initialize member data.
    - When you have a parameterized constructor it will override the default constructor.
    - A constructor is primarily used to initialize objects. They are also used to run a default code when an object is created.

    - Copy Constructors: 
      - The copy constructor is used to initialize the members of a newly created object by copying the members of an already existing object as below:
          - Automaticly:  Person person2 = person1;
          - Manual : pass calass by reference in the constructor
    
    -What are the types of constructors:
       1- Default Construcotr
       2- Parameterized constructor: ضمنلي انه مايكون عندي اوبجيكت فاضي (meaningful object: initialize all object data members)
       3- Copy constructor
       
    -in sub class ctor i fill partmers (Parameterized Constructor of the Base Class):
      1- force: related to base class
      2- optional: related to sub class ex:
         class Employee : Person
            {
                private double _salary;
                private string _department;
                private string _title;

                public Employee(int id, string firstName, string lastName,
                                string email, string phone,
                                double salary, string department, string title) : base(id, firstName, lastName, email, phone)
                {
                    _salary = salary;
                    _department = department;
                    _title = title;
                }
  
3- Destructors:
    last function called before the destroy the object from memory
   
    
4- Static Member:
  - Static Member is a variable that is shared for all objects, any object modifies it it get modified for all other objects. (static variable = shared variable = global variable)
  - Static members are on the class level not for each object ex: count all objects from class
  - Static members are on the class level not for each object.

5- Read only property doesn't have set method

6- Function Overriding:
   - Replace main function code with new implementation as i want
   - Just create function in sub class with the same siqniture --> automaticlly override
   
7- Up Casting vs Down Casting:
   - always convert from big to small (child is the big because it has member more than base class)
   - up casting: Employee emp = new Person()--> True        down casting: Person person = new Employee()--> false
   - base -> derived  (true)   derived -> base (false)
   
8-  Virtual Functions:
    - A virtual function is a member function in the base class that we expect to redefine in derived classes.
    - //up casting
            Person p = new Employee();
            p.print();

            Person e = new Student();
            e.print();
       // Output 
       Hi, i am an Employee
       Hi, i am a Student
  
  
  
  
  
